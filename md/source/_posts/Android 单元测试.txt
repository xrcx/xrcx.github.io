[slide]
## Android 测试
1. 单元测试
2. 功能测试
3. 集成测试
4. UI测试

[slide] 
## 单元测试
1. 什么是单元测试
单元测试，是为了测试某一个类的某一个方法能否正常工作，而写的测试代码。
2. 为什么要单元测试
- 对软件质量的提升
- 方便重构
- 节约时间
- 提升代码设计

[slide] 
## Android 单元测试
### 方式
- Instrumented单元测试，app/src/androidTest/java - 放置需要运行在Android设备上的测试代码
- 本地单元测试，app/src/test/java - 放置运行在JVM上的单元测试代码

1. 覆盖率
2. 
[slide] 
## 使用到的技术
1. [Junit](http://junit.org/junit4/)
2. AndroidJUnitRunner ,Google官方的android单元测试框架之一,跟Junit是一样的，只不过需要运行在android真机或模拟器环境
2. [Mockito](http://mockito.org/)
3. Powermockito
4. [Robolectric](http://robolectric.org/)
5. Espresso


[slide] 
## 本地单元测试
1.build.gradle 配置
```
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
}
```
[slide] 
2. 例子
``` java 
package com.example.testing.testingexample;
public class Calculator {
    public double sum(double a, double b){
        return 0;
    }
    public double substract(double a, double b){
        return 0;
    }
    public double divide(double a, double b){
        return 0;
    }
    public double multiply(double a, double b){
        return 0;
    }
}
```

[slide] 
## Instrumented单元测试


[slide] 
## AndroidJUnitRunner
运行JUnit3和JUnit4测试的一个Android包（应用程序）
1. build.gradle 配置
``` java
defaultConfig {
        // ...
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
```

[slide]
2. 注释
- @RequiresDevice来指定该条测试只运行在物理设备，而不是模拟设备
- @SdkSupress(miniSdkVersion=18) 限制在指定的Android设备上运行
- @LargeTest @MediumTest @SmallTest 用于将测试用例按照重要程度进行分类，在进行测试的时候可以选择只运行某个类别的测试用例。
    + @SmallTest 标志该测试方法是小型测试的一部分
    + @MediumTest 标志该测试方法是中等测试的一部分
    + @LargeTest 标志该测试方法是大型测试的一部分
- @Test 指定当前是一个测试方法
- @Before 每个测试之前都会被执行
- @After  每个测试方法运行结束之后都会被执行
- @BeforeClass 在这个方法所在测试类运行之前会被执行，并且在一个类中只会执行一次
- @AfterClass 在这个方法所在测试类运行结束之后会被执行，并且在一个类中也只会执行一次
- @Ignore 该方法被忽略

[slide]
3. 获取资源
InstrumentationRegistry.getInstrumentation() 返回当前正在运行的Instrumentation
InstrumentationRegistry.getContext() 返回此Instrumentation软件包的上下文。
InstrumentationRegistry.getTargetContext() 返回目标应用的应用上下文。
InstrumentationRegistry.getArguments() 返回传递给此Instrumentation的参数Bundle。当你要访问命令行参数时非常有用。 

[slide] https://my.oschina.net/u/1433482/blog/602003 http://www.cnblogs.com/tiantianbyconan/p/5048524.html
注释

1. Activity
2. Service

[slide] 
## Mockito

[slide] 
## Powermockito
https://my.oschina.net/jackieyeah/blog/157076
[slide] 
## Robolectric
